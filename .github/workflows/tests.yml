name: tests

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  fmt:
    name: cargo fmt
    runs-on: ubuntu-latest
    container:
      image: rust:1.81-bookworm
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - run: |
          rustup component add rustfmt
          cargo fmt --all -- --check

  sqlx:
    name: prepared query metadata is up-to-date
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    container:
      image: rust:1.81-bookworm
    env:
      DATABASE_URL: postgres://postgres@postgres:5432
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache dependencies
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@9e326ebed976843c9932b3aa0e021c6f50310eb4 # v0.0.6
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Install sqlx
        run: cargo install sqlx-cli --no-default-features --features postgres
      - name: Run the test sqlx migrations
        run: cargo sqlx migrate run
      - name: Check that the sqlx prepared query metadata is up-to-date
        run: cargo sqlx prepare --workspace --check -- --all-targets --all-features

  clippy:
    name: cargo clippy
    runs-on: ubuntu-latest
    container:
      image: rust:1.81-bookworm
    env:
      DATABASE_URL: postgres://postgres@postgres:5432
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache dependencies
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@9e326ebed976843c9932b3aa0e021c6f50310eb4 # v0.0.6
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - run: |
          rustup component add clippy
          # Temporarily allowing dead-code, while denying all other warnings
          cargo clippy --all-features --all-targets -- -A dead-code -D warnings

  test-and-coverage:
    name: cargo test and coverage
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    container:
      image: rust:1.81-bookworm
    env:
      DATABASE_URL: postgres://postgres@postgres:5432
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache dependencies
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@9e326ebed976843c9932b3aa0e021c6f50310eb4 # v0.0.6
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install sqlx
        run: cargo install sqlx-cli --no-default-features --features postgres
      - name: Run the test sqlx migrations
        run: cargo sqlx migrate run
      - name: Run tests and generate coverage report
        run: cargo llvm-cov test --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@cfd0633edbd2411b532b808ba7a8b5e04f76d2c8 # v2.3.4
        with:
          file: ./lcov.info

  # Cannot do with llvm-cov, see https://github.com/taiki-e/cargo-llvm-cov/issues/2
  test-docs:
    name: cargo test docs code snippets
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    container:
      image: rust:1.81-bookworm
    env:
      DATABASE_URL: postgres://postgres@postgres:5432
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache dependencies
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@9e326ebed976843c9932b3aa0e021c6f50310eb4 # v0.0.6
        if: ${{ !startsWith(github.head_ref, 'renovate/') }}
      - name: Install sqlx
        run: cargo install sqlx-cli --no-default-features --features postgres
      - name: Run the test sqlx migrations
        run: cargo sqlx migrate run
      - name: Test documentation code snippets
        run: cargo test --doc --all-features --workspace
