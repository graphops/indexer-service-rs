"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes

    """
    The block number
    """
    number: Int!

    """
    Integer representation of the timestamp stored in blocks for the chain
    """
    timestamp: Int

    """
    The hash of the parent block
    """
    parentHash: Bytes
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!

    """
    The deployment ID
    """
    deployment: String!

    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow

    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}

enum Aggregation_interval {
    hour
    day
}

scalar BigDecimal

scalar BigInt

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

input BlockChangedFilter {
    number_gte: Int!
}

scalar Bytes

type EscrowAccount {
    id: ID!
    sender: Sender!
    receiver: Receiver!
    balance: BigInt!
    totalAmountThawing: BigInt!
    thawEndTimestamp: BigInt!
    transactions(
        skip: Int = 0
        first: Int = 100
        orderBy: Transaction_orderBy
        orderDirection: OrderDirection
        where: Transaction_filter
    ): [Transaction!]
}

input EscrowAccount_filter {
    id: ID
    id_not: ID
    id_gt: ID
    id_lt: ID
    id_gte: ID
    id_lte: ID
    id_in: [ID!]
    id_not_in: [ID!]
    sender: String
    sender_not: String
    sender_gt: String
    sender_lt: String
    sender_gte: String
    sender_lte: String
    sender_in: [String!]
    sender_not_in: [String!]
    sender_contains: String
    sender_contains_nocase: String
    sender_not_contains: String
    sender_not_contains_nocase: String
    sender_starts_with: String
    sender_starts_with_nocase: String
    sender_not_starts_with: String
    sender_not_starts_with_nocase: String
    sender_ends_with: String
    sender_ends_with_nocase: String
    sender_not_ends_with: String
    sender_not_ends_with_nocase: String
    sender_: Sender_filter
    receiver: String
    receiver_not: String
    receiver_gt: String
    receiver_lt: String
    receiver_gte: String
    receiver_lte: String
    receiver_in: [String!]
    receiver_not_in: [String!]
    receiver_contains: String
    receiver_contains_nocase: String
    receiver_not_contains: String
    receiver_not_contains_nocase: String
    receiver_starts_with: String
    receiver_starts_with_nocase: String
    receiver_not_starts_with: String
    receiver_not_starts_with_nocase: String
    receiver_ends_with: String
    receiver_ends_with_nocase: String
    receiver_not_ends_with: String
    receiver_not_ends_with_nocase: String
    receiver_: Receiver_filter
    balance: BigInt
    balance_not: BigInt
    balance_gt: BigInt
    balance_lt: BigInt
    balance_gte: BigInt
    balance_lte: BigInt
    balance_in: [BigInt!]
    balance_not_in: [BigInt!]
    totalAmountThawing: BigInt
    totalAmountThawing_not: BigInt
    totalAmountThawing_gt: BigInt
    totalAmountThawing_lt: BigInt
    totalAmountThawing_gte: BigInt
    totalAmountThawing_lte: BigInt
    totalAmountThawing_in: [BigInt!]
    totalAmountThawing_not_in: [BigInt!]
    thawEndTimestamp: BigInt
    thawEndTimestamp_not: BigInt
    thawEndTimestamp_gt: BigInt
    thawEndTimestamp_lt: BigInt
    thawEndTimestamp_gte: BigInt
    thawEndTimestamp_lte: BigInt
    thawEndTimestamp_in: [BigInt!]
    thawEndTimestamp_not_in: [BigInt!]
    transactions_: Transaction_filter

    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [EscrowAccount_filter]
    or: [EscrowAccount_filter]
}

enum EscrowAccount_orderBy {
    id
    sender
    sender__id
    receiver
    receiver__id
    balance
    totalAmountThawing
    thawEndTimestamp
    transactions
}

"""
8 bytes signed integer
"""
scalar Int8

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Query {
    escrowAccount(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): EscrowAccount
    escrowAccounts(
        skip: Int = 0
        first: Int = 100
        orderBy: EscrowAccount_orderBy
        orderDirection: OrderDirection
        where: EscrowAccount_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [EscrowAccount!]!
    sender(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Sender
    senders(
        skip: Int = 0
        first: Int = 100
        orderBy: Sender_orderBy
        orderDirection: OrderDirection
        where: Sender_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Sender!]!
    receiver(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Receiver
    receivers(
        skip: Int = 0
        first: Int = 100
        orderBy: Receiver_orderBy
        orderDirection: OrderDirection
        where: Receiver_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Receiver!]!
    transaction(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Transaction
    transactions(
        skip: Int = 0
        first: Int = 100
        orderBy: Transaction_orderBy
        orderDirection: OrderDirection
        where: Transaction_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Transaction!]!
    signer(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Signer
    signers(
        skip: Int = 0
        first: Int = 100
        orderBy: Signer_orderBy
        orderDirection: OrderDirection
        where: Signer_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Signer!]!

    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
}

type Receiver {
    id: ID!
    escrowAccounts(
        skip: Int = 0
        first: Int = 100
        orderBy: EscrowAccount_orderBy
        orderDirection: OrderDirection
        where: EscrowAccount_filter
    ): [EscrowAccount!]
    transactions(
        skip: Int = 0
        first: Int = 100
        orderBy: Transaction_orderBy
        orderDirection: OrderDirection
        where: Transaction_filter
    ): [Transaction!]
}

input Receiver_filter {
    id: ID
    id_not: ID
    id_gt: ID
    id_lt: ID
    id_gte: ID
    id_lte: ID
    id_in: [ID!]
    id_not_in: [ID!]
    escrowAccounts_: EscrowAccount_filter
    transactions_: Transaction_filter

    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Receiver_filter]
    or: [Receiver_filter]
}

enum Receiver_orderBy {
    id
    escrowAccounts
    transactions
}

type Sender {
    id: ID!
    escrowAccounts(
        skip: Int = 0
        first: Int = 100
        orderBy: EscrowAccount_orderBy
        orderDirection: OrderDirection
        where: EscrowAccount_filter
    ): [EscrowAccount!]
    transactions(
        skip: Int = 0
        first: Int = 100
        orderBy: Transaction_orderBy
        orderDirection: OrderDirection
        where: Transaction_filter
    ): [Transaction!]
    signers(
        skip: Int = 0
        first: Int = 100
        orderBy: Signer_orderBy
        orderDirection: OrderDirection
        where: Signer_filter
    ): [Signer!]
}

input Sender_filter {
    id: ID
    id_not: ID
    id_gt: ID
    id_lt: ID
    id_gte: ID
    id_lte: ID
    id_in: [ID!]
    id_not_in: [ID!]
    escrowAccounts_: EscrowAccount_filter
    transactions_: Transaction_filter
    signers_: Signer_filter

    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Sender_filter]
    or: [Sender_filter]
}

enum Sender_orderBy {
    id
    escrowAccounts
    transactions
    signers
}

type Signer {
    id: ID!
    isAuthorized: Boolean!
    sender: Sender!
    thawEndTimestamp: BigInt!
}

input Signer_filter {
    id: ID
    id_not: ID
    id_gt: ID
    id_lt: ID
    id_gte: ID
    id_lte: ID
    id_in: [ID!]
    id_not_in: [ID!]
    isAuthorized: Boolean
    isAuthorized_not: Boolean
    isAuthorized_in: [Boolean!]
    isAuthorized_not_in: [Boolean!]
    sender: String
    sender_not: String
    sender_gt: String
    sender_lt: String
    sender_gte: String
    sender_lte: String
    sender_in: [String!]
    sender_not_in: [String!]
    sender_contains: String
    sender_contains_nocase: String
    sender_not_contains: String
    sender_not_contains_nocase: String
    sender_starts_with: String
    sender_starts_with_nocase: String
    sender_not_starts_with: String
    sender_not_starts_with_nocase: String
    sender_ends_with: String
    sender_ends_with_nocase: String
    sender_not_ends_with: String
    sender_not_ends_with_nocase: String
    sender_: Sender_filter
    thawEndTimestamp: BigInt
    thawEndTimestamp_not: BigInt
    thawEndTimestamp_gt: BigInt
    thawEndTimestamp_lt: BigInt
    thawEndTimestamp_gte: BigInt
    thawEndTimestamp_lte: BigInt
    thawEndTimestamp_in: [BigInt!]
    thawEndTimestamp_not_in: [BigInt!]

    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Signer_filter]
    or: [Signer_filter]
}

enum Signer_orderBy {
    id
    isAuthorized
    sender
    sender__id
    thawEndTimestamp
}

type Subscription {
    escrowAccount(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): EscrowAccount
    escrowAccounts(
        skip: Int = 0
        first: Int = 100
        orderBy: EscrowAccount_orderBy
        orderDirection: OrderDirection
        where: EscrowAccount_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [EscrowAccount!]!
    sender(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Sender
    senders(
        skip: Int = 0
        first: Int = 100
        orderBy: Sender_orderBy
        orderDirection: OrderDirection
        where: Sender_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Sender!]!
    receiver(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Receiver
    receivers(
        skip: Int = 0
        first: Int = 100
        orderBy: Receiver_orderBy
        orderDirection: OrderDirection
        where: Receiver_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Receiver!]!
    transaction(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Transaction
    transactions(
        skip: Int = 0
        first: Int = 100
        orderBy: Transaction_orderBy
        orderDirection: OrderDirection
        where: Transaction_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Transaction!]!
    signer(
        id: ID!

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Signer
    signers(
        skip: Int = 0
        first: Int = 100
        orderBy: Signer_orderBy
        orderDirection: OrderDirection
        where: Signer_filter

        """
        The block at which the query should be executed. Can either be a `{ hash:
        Bytes }` value containing a block hash, a `{ number: Int }` containing the
        block number, or a `{ number_gte: Int }` containing the minimum block
        number. In the case of `number_gte`, the query will be executed on the
        latest block only if the subgraph has progressed to or past the minimum
        block number. Defaults to the latest block when omitted.
        """
        block: Block_height

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Signer!]!

    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)
"""
scalar Timestamp

type Transaction {
    id: ID!
    transactionGroupID: String!
    type: String!
    sender: Sender!
    receiver: Receiver!
    allocationID: String
    expectedAmount: BigInt
    amount: BigInt!
    escrowAccount: EscrowAccount!
}

input Transaction_filter {
    id: ID
    id_not: ID
    id_gt: ID
    id_lt: ID
    id_gte: ID
    id_lte: ID
    id_in: [ID!]
    id_not_in: [ID!]
    transactionGroupID: String
    transactionGroupID_not: String
    transactionGroupID_gt: String
    transactionGroupID_lt: String
    transactionGroupID_gte: String
    transactionGroupID_lte: String
    transactionGroupID_in: [String!]
    transactionGroupID_not_in: [String!]
    transactionGroupID_contains: String
    transactionGroupID_contains_nocase: String
    transactionGroupID_not_contains: String
    transactionGroupID_not_contains_nocase: String
    transactionGroupID_starts_with: String
    transactionGroupID_starts_with_nocase: String
    transactionGroupID_not_starts_with: String
    transactionGroupID_not_starts_with_nocase: String
    transactionGroupID_ends_with: String
    transactionGroupID_ends_with_nocase: String
    transactionGroupID_not_ends_with: String
    transactionGroupID_not_ends_with_nocase: String
    type: String
    type_not: String
    type_gt: String
    type_lt: String
    type_gte: String
    type_lte: String
    type_in: [String!]
    type_not_in: [String!]
    type_contains: String
    type_contains_nocase: String
    type_not_contains: String
    type_not_contains_nocase: String
    type_starts_with: String
    type_starts_with_nocase: String
    type_not_starts_with: String
    type_not_starts_with_nocase: String
    type_ends_with: String
    type_ends_with_nocase: String
    type_not_ends_with: String
    type_not_ends_with_nocase: String
    sender: String
    sender_not: String
    sender_gt: String
    sender_lt: String
    sender_gte: String
    sender_lte: String
    sender_in: [String!]
    sender_not_in: [String!]
    sender_contains: String
    sender_contains_nocase: String
    sender_not_contains: String
    sender_not_contains_nocase: String
    sender_starts_with: String
    sender_starts_with_nocase: String
    sender_not_starts_with: String
    sender_not_starts_with_nocase: String
    sender_ends_with: String
    sender_ends_with_nocase: String
    sender_not_ends_with: String
    sender_not_ends_with_nocase: String
    sender_: Sender_filter
    receiver: String
    receiver_not: String
    receiver_gt: String
    receiver_lt: String
    receiver_gte: String
    receiver_lte: String
    receiver_in: [String!]
    receiver_not_in: [String!]
    receiver_contains: String
    receiver_contains_nocase: String
    receiver_not_contains: String
    receiver_not_contains_nocase: String
    receiver_starts_with: String
    receiver_starts_with_nocase: String
    receiver_not_starts_with: String
    receiver_not_starts_with_nocase: String
    receiver_ends_with: String
    receiver_ends_with_nocase: String
    receiver_not_ends_with: String
    receiver_not_ends_with_nocase: String
    receiver_: Receiver_filter
    allocationID: String
    allocationID_not: String
    allocationID_gt: String
    allocationID_lt: String
    allocationID_gte: String
    allocationID_lte: String
    allocationID_in: [String!]
    allocationID_not_in: [String!]
    allocationID_contains: String
    allocationID_contains_nocase: String
    allocationID_not_contains: String
    allocationID_not_contains_nocase: String
    allocationID_starts_with: String
    allocationID_starts_with_nocase: String
    allocationID_not_starts_with: String
    allocationID_not_starts_with_nocase: String
    allocationID_ends_with: String
    allocationID_ends_with_nocase: String
    allocationID_not_ends_with: String
    allocationID_not_ends_with_nocase: String
    expectedAmount: BigInt
    expectedAmount_not: BigInt
    expectedAmount_gt: BigInt
    expectedAmount_lt: BigInt
    expectedAmount_gte: BigInt
    expectedAmount_lte: BigInt
    expectedAmount_in: [BigInt!]
    expectedAmount_not_in: [BigInt!]
    amount: BigInt
    amount_not: BigInt
    amount_gt: BigInt
    amount_lt: BigInt
    amount_gte: BigInt
    amount_lte: BigInt
    amount_in: [BigInt!]
    amount_not_in: [BigInt!]
    escrowAccount: String
    escrowAccount_not: String
    escrowAccount_gt: String
    escrowAccount_lt: String
    escrowAccount_gte: String
    escrowAccount_lte: String
    escrowAccount_in: [String!]
    escrowAccount_not_in: [String!]
    escrowAccount_contains: String
    escrowAccount_contains_nocase: String
    escrowAccount_not_contains: String
    escrowAccount_not_contains_nocase: String
    escrowAccount_starts_with: String
    escrowAccount_starts_with_nocase: String
    escrowAccount_not_starts_with: String
    escrowAccount_not_starts_with_nocase: String
    escrowAccount_ends_with: String
    escrowAccount_ends_with_nocase: String
    escrowAccount_not_ends_with: String
    escrowAccount_not_ends_with_nocase: String
    escrowAccount_: EscrowAccount_filter

    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Transaction_filter]
    or: [Transaction_filter]
}

enum Transaction_orderBy {
    id
    transactionGroupID
    type
    sender
    sender__id
    receiver
    receiver__id
    allocationID
    expectedAmount
    amount
    escrowAccount
    escrowAccount__id
    escrowAccount__balance
    escrowAccount__totalAmountThawing
    escrowAccount__thawEndTimestamp
}
