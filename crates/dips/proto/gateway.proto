syntax = "proto3";

package graphprotocol.gateway.dips;

service DipperService {
  /**
   * Cancel an _indexing agreement_.
   *
   * This method allows the indexer to notify the DIPs gateway that the agreement
   * should be canceled.
   */
  rpc CancelAgreement(CancelAgreementRequest) returns (CancelAgreementResponse);

  /**
   * Collect payment for an _indexing agreement_.
   *
   * This method allows the indexer to report the work completed to the DIPs gateway
   * and receive payment for the indexing work done.
   */
  rpc CollectPayment(CollectPaymentRequest) returns (CollectPaymentResponse);
}


/**
 * A request to cancel an _indexing agreement_.
 *
 * See the `DipsService.CancelAgreement` method.
 */
message CancelAgreementRequest {
  uint64 version = 1;
  bytes signed_cancellation = 2;  /// a signed ERC-712 message cancelling an agreement
}

/**
 * A response to a request to cancel an _indexing agreement_.
 *
 * See the `DipsService.CancelAgreement` method.
 */
message CancelAgreementResponse {
  /// Empty response, eventually we may add custom status codes
}

/**
 * A request to collect payment _indexing agreement_.
  *
  * See the `DipsService.CollectPayment` method.
 */
message CollectPaymentRequest {
  uint64 version = 1;
  bytes signed_collection = 2; 
}

/**
 * A response to a request to collect payment for an _indexing agreement_.
 *
 * See the `DipsService.CollectAgreement` method.
 */
message CollectPaymentResponse {
  uint64 version = 1;
  CollectPaymentStatus status = 2;
  bytes tap_receipt = 3;
}

/**
 * The status on response to collect an _indexing agreement_.
 */
enum CollectPaymentStatus {
  ACCEPT = 0; /// The payment request was accepted.
  ERR_TOO_EARLY = 1; /// The payment request was done before min epochs passed
  ERR_TOO_LATE = 2; /// The payment request was done after max epochs passed
  ERR_AMOUNT_OUT_OF_BOUNDS = 3; /// The payment request is for too large an amount
  ERR_UNKNOWN = 99; /// Something else went terribly wrong
}
